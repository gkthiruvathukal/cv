@inproceedings{10.1145/3337932.3338814,
 abbr = {ACM},
 abstract = {In testing stateful abstractions, it is often necessary to record interactions, such as method invocations, and express assertions over these interactions. Following the Test Spy design pattern, we can reify such interactions programmatically through additional mutable state. Alternatively, a mocking framework, such as Mockito, can automatically generate test spies that allow us to record the interactions and express our expectations in a declarative domain-specific language. According to our study of the test code for Scala's Iterator trait, the latter approach can lead to a significant reduction of test code complexity in terms of metrics such as code size (in some cases over 70\% smaller), cyclomatic complexity, and amount of additional mutable state required. In this tools paper, we argue that the resulting test code is not only more maintainable, readable, and intentional, but also a better stylistic match for the Scala community than manually implemented, explicitly stateful test spies.},
 address = {New York, NY, USA},
 author = {Läufer, Konstantin and O'Sullivan, John and Thiruvathukal, George K.},
 booktitle = {Proceedings of the Tenth ACM SIGPLAN Symposium on Scala},
 doi = {10.1145/3337932.3338814},
 url = {http://ecommons.luc.edu/cs_facpubs/230},
 html = {http://ecommons.luc.edu/cs_facpubs/230},
 isbn = {9781450368247},
 keywords = {automated unit testing, test code metrics, stream processing, spy-based testing, mock-based testing, prefix sum, iterator design pattern, test code complexity},
 location = {London, United Kingdom},
 numpages = {5},
 pages = {17–21},
 publisher = {Association for Computing Machinery},
 series = {Scala '19},
 title = {Tests as Maintainable Assets via Auto-Generated Spies: A Case Study Involving the Scala Collections Library's Iterator Trait},
 url = {https://doi.org/10.1145/3337932.3338814},
 year = {2019}
}

