@article{george_k_thiruvathukal_reflective_1998,
 author = {Thiruvathukal, George K. and Thomas, Lovely S. and Korczynski, Andrew T.},
 copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
 issn = {1040-3108},
 journal = {Concurrency: Practice and Experience},
 number = {11-13},
 pages = {911--925},
 title = {Reflective Remote Method Invocation},
 abstract = {Remote Method Invocation (RMI) is available in the current Java language design and implementation, providing the much-needed capability of allowing objects running in different Java processes to collaborate using a variation on the popular Remote Procedure Call (RPC).
Although RMI provides features which are desirable for high-performance distributed computing, its design and implementation are deficient in key areas of importance to the high-performance computing community in general. This paper addresses the key deficiencies of RMI and how these deficiencies affect the design and implementation of distributed object applications.
Reflective RMI (RRMI) is an open RMI implementation which makes better use of the object-oriented features of Java. RRMI is so-called reflective because it directly employs the reflection capabilities of the current Java language to invoke methods remotely. RRMI makes use of the dynamic class loader (a class called NetClassLoader) to allow client/server applications to be built for high-performance computing systems without having all of the class files present on all nodes in a parallel computation. Among other features discussed are support for asynchronous remote method invocations with deferred reply and exception semantics.},
 volume = {10},
 url = {https://ecommons.luc.edu/cs_facpubs/11/},
 html = {https://ecommons.luc.edu/cs_facpubs/11/},
 pdf = {https://ecommons.luc.edu/cs_facpubs/11/},
 year = {1998}
}

