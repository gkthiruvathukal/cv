
@inproceedings{lewis_using_2013,
	address = {ACM, 2 Penn Plaza, Suite 701, New York, NY 10121-0701, USA},
	title = {Using {Scala} strategically across the undergraduate curriculum (abstract only)},
	copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
	isbn = {978-1-4503-1868-6},
	url = {https://ecommons.luc.edu/cs_facpubs/69/},
	abstract = {Various hybrid-paradigm languages, designed to balance compile-time error detection, conciseness, and performance, have emerged. Scala, e.g., is interoperable with Java and has become an early leader in adoption, especially in the start-up and open-source spaces. Workshop participants experience Scala's value as a teaching language in the CS curriculum through four lecture-lab modules: In CS1, the read-eval-print loop and simple, uniform syntax aid programming in the small. In CS2, higher-order methods allow concise, efficient manipulation of collections. Advanced topics include domain-specific languages, concurrency, web apps/services, and mobile apps. Laptop recommended with Scala installed.},
	booktitle = {44th {ACM} technical symposium / {Computer} science education ({SIGCSE} '13)},
	author = {Lewis, Mark and Läufer, Konstantin and Thiruvathukal, George K.},
	year = {2013},
}

@misc{stasiuk_network_2013,
	title = {Network {Technologies} {Used} to {Aggregate} {Environmental} {Data}},
	copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
	shorttitle = {{GCASR} 13},
	url = {https://ecommons.luc.edu/cs_facpubs/65/},
	author = {Stasiuk, Paul and Läufer, Konstantin and Thiruvathukal, George K.},
	year = {2013},
}

@misc{putonti_organised_2015,
	title = {Organised {Genomic} {HIV} and {Pseudomonas} {Sequence} {Data}},
	copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
	url = {https://figshare.com/articles/dataset/hivdb/1564844},
	publisher = {Figshare},
	author = {Putonti, Catherine and Thiruvathukal, George K.},
	month = oct,
	year = {2015},
	doi = {10.6084/m9.figshare.1564844.v3},
}

@misc{thiruvathukal_gcasr_2015,
	title = {{GCASR} 15: {Middleware} for {Collaborative} {Distributed}/{Mobile} {Applications}: {XMPP} or {Reactive} {HTTP}?},
	copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
	shorttitle = {{GCASR} 15},
	author = {Thiruvathukal, George K.},
	year = {2015},
}

@misc{brophy_quantitative_2015,
	title = {Quantitative {Morphological} {Analysis} of {Bovid} {Teeth} {Using} {Elliptical} {Fourier} {Function} {Analyses}},
	author = {Brophy, Juliet K. and Matthews, Gregory J. and Thiruvathukal, George K.},
	year = {2015},
}

@misc{caughie_woolf_2018,
	title = {Woolf {Online}},
	url = {http://woolfonline.com},
	author = {Caughie, Pamela L. and Hayward, Nicholas J. and Hussey, Mark and Shillingsburg, Peter J. and Thiruvathukal, George K.},
	year = {2018},
}

@misc{dias_building_2013,
	title = {Building {Capable}, {Energy}-{Efficient}, {Flexible} {Visualization} and {Sensing} {Clusters} from {Commodity} {Tablets}},
	copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
	shorttitle = {{GCASR} 15},
	url = {https://ecommons.luc.edu/cs_facpubs/66/},
	author = {Dias, Thomas Delgado and Yan, Xian and Läufer, Konstantin and Thiruvathukal, George K.},
	year = {2013},
}

@inproceedings{lewis_scala_2014,
	address = {ACM, 2 Penn Plaza, Suite 701, New York, NY 10121-0701, USA},
	title = {Scala for {Introductory} {CS} and {Parallelism} ({Workshop})},
	copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
	isbn = {978-1-4503-2605-6},
	url = {https://scalaworkshop.cs.luc.edu},
	abstract = {Scala is one of a new breed of hybrid languages with both object-oriented and functional aspects. It happens to be the most successful of these languages coming in at \#12 on the Red Monk language ranking and leading all languages in their 2nd tier. This workshop will introduce participants to the Scala programming language, how it can be used effectively in introductory CS courses, and the parallel tools that are available for it. We begin with simple examples in the REPL and scripting environment, then look at doing larger, object-oriented projects. We finish off with an exploration of composable futures and the Akka actor library. Participants are strongly recommended to bring a laptop.},
	booktitle = {45th {ACM} technical symposium / {Computer} science education ({SIGCSE} '14)},
	author = {Lewis, Mark and Läufer, Konstantin and Thiruvathukal, George K.},
	year = {2014},
}

@inproceedings{miller_toward_2020,
	title = {Toward a containerized pipeline for longitudinal analysis of open-source software projects},
	url = {http://ecommons.luc.edu/grs/2020/posters/4},
	abstract = {Trust in open-source software is a cornerstone of scientific progress and a foundation of high-quality public services. Just as standards are integral when judging the efficacy of a novel pharmaceutical compound or determining the spread of a new disease, the software used to make those determinations should be useful, error-free, reliable, performant, and secure. A small bug in an application, library, or framework can lead to economic loss and even loss of life. We rely on software developers to be dynamic and responsive to user review and bug-reporting. Our team developed an open-source modular pipeline to perform empirical investigations of software quality. A key innovation of our approach is to look at projects “from a distance” similar to methods used in climate, e.g. satellite images being used to observe environmental impacts in air quality/rain forests. Instead of looking at language-specific source code features, our pipeline uses a language-agnostic high-level approach to track software quality by focusing on the development process itself, which yields great insight into the processes programmers use to write and maintain their software. Our distributed modular approach to analytics allows the pipeline to be easily extended to support additional metrics in future work. We store extracted data in an embedded SQLite database, which means that analysis can proceed without complex server setup, let alone hosting the software on dedicated servers. Our analytical modules are designed for efficiency, and future runs of our software only collect missing data, supporting the incremental analysis of known, important open-source projects.},
	booktitle = {Graduate {Research} {Symposium} 2020},
	author = {Miller, Allan and Thiruvathukal, George K. and Läufer, Konstantin and Amobi, Emmanuel and Higgins, Sean and Maliakal, Linette and Meister, Emily and Putter, Jean-Luc and Rose, Alex and Synovic, Nicholas and Von Hatten, Sophie and Warkentin, Jonathan and Zugschwert, Martin},
	year = {2020},
}
