
@book{jones_codename_2012,
	series = {Platform {Studies}},
	title = {Codename {Revolution}: {The} {Nintendo} {WII} {Platform}},
	copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
	isbn = {978-0-262-01680-3},
	shorttitle = {Codename {Revolution}},
	url = {https://mitpress.mit.edu/9780262016803/codename-revolution/},
	abstract = {Nintendo's hugely popular and influential video game console system considered as technological device and social phenomenon. The Nintendo Wii, introduced in 2006, helped usher in a moment of retro-reinvention in video game play. This hugely popular console system, codenamed Revolution during development, signaled a turn away from fully immersive, time-consuming MMORPGs or forty-hour FPS games and back toward family fun in the living room. Players using the wireless motion-sensitive controller (the Wii Remote, or “Wiimote”) play with their whole bodies, waving, swinging, swaying. The mimetic interface shifts attention from what's on the screen to what's happening in physical space. This book describes the Wii's impact in technological, social, and cultural terms, examining the Wii as a system of interrelated hardware and software that was consciously designed to promote social play in physical space. Each chapter of Codename Revolution focuses on a major component of the Wii as a platform: the console itself, designed to be low-powered and nimble; the iconic Wii Remote; Wii Fit Plus, and its controller, the Wii Balance Board; the Wii Channels interface and Nintendo's distribution system; and the Wii as a social platform that not only affords multiplayer options but also encourages social interaction in shared physical space. Finally, the authors connect the Wii's revolution in mimetic interface gaming—which eventually led to the release of Sony's Move and Microsoft's Kinect—to some of the economic and technological conditions that influence the possibility of making something new in this arena of computing and culture.},
	publisher = {MIT Press},
	author = {Jones, Steven E. and Thiruvathukal, George K.},
	year = {2012},
}

@book{christopher_high_2000,
	title = {High {Performance} {Java} {Platform} {Computing}: {Multithreaded} and {Networked} {Programming}},
	copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
	isbn = {978-0-13-016164-2},
	shorttitle = {High {Performance} {Java} {Computing}},
	url = {https://ecommons.luc.edu/cs_facpubs/3/},
	abstract = {Threading and concurrency are crucial to building high-performance Java applications – but they have a reputation for complexity. High Performance Java Computing thoroughly demystifies these advanced development techniques. It delivers practical programming solutions, proven design patterns, and a rigorously-tested code library – everything developers need to build optimized Java software for technical, business, and E-commerce applications. Start by understanding how threading and concurrency can be used to solve a wide variety of performance problems, enabling the construction of more powerful networked applications. Master the Java 2 Threads classes, including daemon threads, thread control, scheduling, and more. Review the key problems of parallelism – including deadlocks, race conditions, and synchronization – and discover proven techniques for avoiding or resolving them. Finally, master advanced techniques for building optimized concurrent code, including Java monitors, parallel execution of subroutines in shared memory, and parallelizing loops.},
	publisher = {Prentice Hall PTR and Sun Microsystems Press},
	author = {Christopher, Thomas W. and Thiruvathukal, George K.},
	year = {2000},
}

@book{lu_intermediate_2024,
	edition = {2nd},
	title = {Intermediate {C} {Programming}},
	isbn = {978-1-003-83274-4},
	url = {https://search.worldcat.org/title/1440202603},
	abstract = {Revised for a new second edition, Intermediate C Programming provides a stepping-stone for intermediate-level students to go from writing short programs to writing real programs well. It shows students how to identify and eliminate bugs, write clean code, share code with others, and use standard Linux-based tools, such as ddd and valgrind.
This second edition provides expanded coverage of these topics with new material focused on software engineering, including version control and unit testing.},
	publisher = {CRC Press},
	author = {Lu, Yung-Hsiang and Thiruvathukal, George K.},
	year = {2024},
}

@book{carver_software_2017,
	title = {Software {Engineering} for {Science}},
	copyright = {Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC-BY-NC-SA)},
	isbn = {978-1-4987-4385-3},
	url = {https://ecommons.luc.edu/cs_facpubs/128/},
	abstract = {Software Engineering for Science provides an in-depth collection of peer-reviewed chapters that describe with applying software engineering practices to the development of scientifi software. It provides a better understanding of how software engineering is and should be practiced, and which software engineering practices are effective for scientific software. The book starts with a detailed overview of the Scientific Software Lifecycle, and a general overview of the scientific software development process. It highlights key issues commonly arising during scientific software development, as well as solutions to these problems. The second part of the book provides examples of the use of testing in scientific software development, including key issues and challenges.},
	publisher = {Taylor and Francis/CRC Press},
	author = {Carver, Jeffrey and Hong, Neil P. Chue and Thiruvathukal, George K.},
	year = {2017},
}

@book{thiruvathukal_low-power_2022,
	title = {Low-{Power} {Computer} {Vision}: {Improve} the {Efficiency} of {Artificial} {Intelligence}},
	isbn = {978-0-367-74470-0},
	url = {https://ecommons.luc.edu/cs_facpubs/281/},
	abstract = {Energy efficiency is critical for running computer vision on battery-powered systems, such as mobile phones or UAVs (unmanned aerial vehicles, or drones). This book collects the methods that have won the annual IEEE Low-Power Computer Vision Challenges since 2015. The winners share their solutions and provide insight on how to improve the efficiency of machine learning systems.},
	publisher = {Chapman and Hall/CRC Press},
	author = {Thiruvathukal, George K. and Lu, Yung-Hsiang and Kim, Jaeyoun and Chen, Yiran and Chen, Bo},
	year = {2022},
}

@book{thiruvathukal_web_2002,
	address = {Upper Saddle River, NJ},
	title = {Web {Programming}: {Techniques} for {Integrating} {Python}, {Linux}, {Apache}, and {MySQL}},
	copyright = {All rights reserved},
	isbn = {978-0-13-041065-8},
	url = {https://ecommons.luc.edu/cs_facpubs/267/},
	abstract = {This book was published in 2002 and is now out of print. Full rights have been reverted back to the authors from Prentice Hall PTR (now part of Pearson). Web Programming in Python was an early book on how to develop web applications using Python via a more integrated, framework-based approach. It provides a self-contained introduction to Python, Linux, MySQL (database programming and SQL), and Apache Web Server. We get many requests to make this book available. The world has since moved on to many other web frameworks (with a great emphasis on JavaScript) but as authors are committed to preserving knowledge and long-term digital archival. We thank our past readers for their support. Please direct any queries to George K. Thiruvathukal.},
	publisher = {Prentice Hall},
	author = {Thiruvathukal, George K. and Shafaee, John P. and Christopher, Thomas W.},
	year = {2002},
}
